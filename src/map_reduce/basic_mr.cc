#include <string>
#include <fstream>
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
#include "map_reduce/protocol.h"

namespace mapReduce{
//
// The map function is called once for each file of input. The first
// argument is the name of the input file, and the second is the
// file's complete contents. You should ignore the input file name,
// and look only at the contents argument. The return value is a slice
// of key/value pairs.
//  
std::vector<KeyVal> Map(const std::string &content) {
   vector<KeyVal> ret;
    size_t start = 0; // Index to track the start of a word

    for (size_t i = 0; i <= content.length(); ++i) {
        // Check if we have reached the end of a word
        if (i == content.length() || !std::isalpha(content[i])) {
            if (i > start) {
                // Extract the word from 'start' to 'i'
                string word = content.substr(start, i - start);
                ret.push_back({word, "1"});
            }
            start = i + 1; // Move 'start' to the next character after the delimiter
        }
    }

    return ret;
}
//
// The reduce function is called once for each key generated by the
// map tasks, with a list of all the values created for that key by
// any map task.
//
    std::string Reduce(const std::string &key, const std::vector<std::string> &values) {
        // Your code goes here
         int count = 0;
        for (const auto& value : values) {
            count += std::stoi(value);
        }
        return std::to_string(count);
    }
}   